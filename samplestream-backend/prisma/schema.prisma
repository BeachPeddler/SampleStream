// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  userProfile  UserProfile?
}

model UserProfile {
  id                  Int              @id @default(autoincrement())
  userId              Int              @unique
  user                User             @relation(fields: [userId], references: [id])
  dateOfBirth         DateTime
  userPhoto           String           @default("profile_pics/profile_picture_default.jpg")
  bio                 String           @db.Text
  isPrivate           Boolean          @default(false)

  followers           Follow[]         @relation("FollowedBy")
  following           Follow[]         @relation("Following")
  followRequests      FollowRequest[]  @relation("FollowRequests")
  sentFollowRequests  FollowRequest[]  @relation("SentFollowRequests")

  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Follow {
  id           Int          @id @default(autoincrement())
  follower     UserProfile  @relation("Following", fields: [followerId], references: [id])
  followerId   Int
  following    UserProfile  @relation("FollowedBy", fields: [followingId], references: [id])
  followingId  Int
  createdAt    DateTime     @default(now())

  @@unique([followerId, followingId])
}

model FollowRequest {
  id        Int          @id @default(autoincrement())
  from      UserProfile  @relation("SentFollowRequests", fields: [fromId], references: [id])
  fromId    Int
  to        UserProfile  @relation("FollowRequests", fields: [toId], references: [id])
  toId      Int
  createdAt DateTime     @default(now())

  @@unique([fromId, toId])
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  samples Sample[]  @relation("SampleTags")
}

model Sample {
  id            Int         @id @default(autoincrement())
  name          String
  audioFile     String
  isPublic      Boolean     @default(true)
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?

  tags          Tag[]       @relation("SampleTags")

  posts         Post[]
  comments      Comment[]

  createdAt     DateTime    @default(now())
}

model Chat {
  id            Int          @id @default(autoincrement())
  chatName      String
  chatTimeStamp DateTime     @default(now())
  isGroupChat   Boolean      @default(false)

  userProfiles  UserProfile[] @relation("ChatUserProfiles")

  messages      Message[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Message {
  id            Int          @id @default(autoincrement())
  chat          Chat         @relation(fields: [chatId], references: [id])
  chatId        Int
  userProfile   UserProfile  @relation(fields: [userProfileId], references: [id])
  userProfileId Int
  content       String
  createdAt     DateTime     @default(now())

  formattedCreatedAt String?  @ignore  // Not stored, just for formatting purposes in app logic
}


model Post {
  id           Int         @id @default(autoincrement())
  postText     String
  postTimeStamp DateTime   @default(now())

  sample       Sample?     @relation(fields: [sampleId], references: [id])
  sampleId     Int?

  userProfile  UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int

  likes        User[]      @relation("PostLikes")

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Comment {
  id              Int          @id @default(autoincrement())
  commentMessage  String
  commentTimeStamp DateTime    @default(now())

  post            Post         @relation(fields: [postId], references: [id])
  postId          Int

  sample          Sample?      @relation(fields: [sampleId], references: [id])
  sampleId        Int?

  userProfile     UserProfile  @relation(fields: [userProfileId], references: [id])
  userProfileId   Int

  createdAt       DateTime     @default(now())
}



